Title:	use fixed entr.id's in .pgi files
Stat:	closed
Disp:	done
Prio:	high
Cats:	dev
Reqtrs:	
AssdTo:	stuart@friix.com

2007-07-12 00:00:00 stuart@friix.com
  Currently we allow loading data from different sources by generating
  intemediate .pgi files that have symbolic entr.id numbers which are
  assigned real values (which depend upon what is already in the database)
  when the file is processed into a .dmp file by jmload.pl.
  
  This requires the .pgi file contain the specially formatted symbolic
  entr.id numbers which only the file loader programs know how to produce
  and jmload.pl knows how to convert to fixed values.
  
  I wanted to extract some entries from one database a load into a
  different database but that requires converting the entr.id numbers in
  to the symbolic form used by jmload.pl.
  
  We could have the loader programs generate fixed entr.id numbers and
  tell jmload.pl where the entr.id values are in the table data and let it
  adjust them without requiring the special symbolic form.  This will
  allow jmload.pl to work with any postgresql dump file.  Disadvantage is
  that this will make jmload.pl yet another piece of code that needs to be
  updated when a schema change occurs.

2007-07-13 00:00:00 stuart@friix.com
  jmdictpgi::wrentr() modified to write fixed entr.id numbers and since
  all the loader programs (currently jmparse.pl, exparse.pl) use this
  funtion for output, yjey all now generate fixed rather than symbolic
  entrid's.
  
  jmload.pl modified so that it knows what columns in each table contain
  entr.id numbers, and it will rebase those columns.  This allows it to
  work with any postgresql dump file that contains table data from those
  tables as well as the output of jmparse.pl and exparse.pl.
  
  However, it doesn't really handle xref table data well.  It allows the
  rebasing to be limited to a specific range of entr.id values and if the
  xref entr.id values are in that range they are rebased.  Otherwise they
  are left unchanged.  About as good as we can do until we have a entr.id-
  independent way of refering to entries (see task id 76).
