Title:	Support three-letter language codes
Stat:	closed
Disp:	done
Prio:	crit
Cats:	dev
Reqtrs:	
AssdTo:	

2008-04-09 07:55:55 sysad
  Jim Breen changed jmdict from iso-639-1 two-letter language 
  codes to three-letter iso-639 codes around 2008-04-08, see
  the "Re: Language codes (was: a few more jmdict errors)" thread
  on the edict mailing list:
    http://tech.groups.yahoo.com/group/edict-jmdict/message/2500

  Need to update the jbdictdb software to support this.  Since 
  there is no working Python jmdict parsers yet, changes will be
  made to the Perl code.

  Currently, there are two files that contain language codes:

   * perl/lib/jmdictxml.pm -- Maps the language codes (currently
	two-letter) used in the jmdict xml file, to language id 
	numbers used in the database.
   * pg/data/kwlang.csv -- Maps the language id numbers usen in the
	database back to a letter code used for display.
  [There is no requirement that input (from xml) codes and display
  codes neccessarily be the same but if they are different then we 
  we'll need to know how to map between them.]

  Since there is no data exported from the database that contains
  language codes there is as yet no requirement to maintain 
  compatability with the current database numeric language id numbers. 

2008-04-09 08:11:11 sysad
  There are two ISO-639 three-letter langauge code standards: 
   * ISO-639-2 (1998) http://www.loc.gov/standards/iso639-2/php/code_list.php
   * ISO-639-3 (2007) http://www.sil.org/iso639-3/download.asp
  The former contains about 1000 codes, the latter about 7000.
  Jim stated in the above referenced email thread that he prefers 
  the -2 version but reasons given don't seem valid.  Requested 
  clarification.

2008-04-09 08:12:11 sysad
  How language currently works in jmdictdb:
  * The file pg/data/kwlang maps every iso-639-1 two letter code 
    to an id number sequentially and provides the data that populates
    database table kwlang.  The letter-codes in the kwlang table 
    are used for ui display and are sometimes used in perl code
    to avoid using an id number directly in the interest of code
    clarity.
  * The file perl/lib/jmdictxml defines a hash that maps every
    language code that could be used in the jmdict xml file (which
    also happen to be iso-639-1 codes) to the same id number as 
    used in kwlang table.
  * The reason for separate map files for the parsing the xml, and 
    for ui display is to decouple them and allow either to change
    tags without neccessarily affecting the other.
  * Both the data in the kwlang.csv table, and the perl code in the
    (lang specific part of the) jmdictxml.pm file were generated 
    once by running a program the extracted the codes from the iso
    639-1 list, assigned the "en" language id 1, added code "ain"
    (which in not in iso-639-1), and assigned sequential id's to
    the remaining codes in iso-639-1. 
  * The file perl/lib/kwstatic contains a representation of the 
    database kw* tables that is loadable without accessing the 
    database (for the convenience of programs that participate 
    in creating a database).  It is regenerated (by running 
    tools/mkkwmod.pl via perl/lib/Makefile) whenever any kw* table 
    is changed by processing the pg/data/kw*.csv. 

  Options for three-letter code support:
  1. Continue as now using all the codes from iso-639-2 or -3.
     This will result in very large files: kwlang.csv (ok)
     jmdictxml.pm (bad since it get hand edited), kwstatic.pm.
     If jmdict chooses to use iso-639-2 and the database iso-639-3,
     then we'll also have to worry about mapping all ~1K -2
     codes to the id's assigned to their -3 counterparts.
  2. Same as (1.) but make jmdictxml.pm reference a separate file
     containing the LANG codes.
  3. Same as (1.) but in jmdictxml.pm include only the lang tags 
     actually in use in the jmdict xml file.  This doesn't address
     the large size of kwstatic.pm but that file is not used much
     so maybe that's not important.  Biggest downside is need to 
     add new language tag to jmdictxml.pm every time a new one 
     apears in jmdixt.xml.  Had to do this in past and it was a 
     royal pain.  Perhaps some scanning tool run before a parse is
     done could help.  Upside is if jmdict uses iso639-2 then we
     only have to map a small number of codes to -3.
  4. Use only "in-use" tags in both jmdictxml.pm and kwlang.csv.
     If the full iso set is not used in kwlang.csv, then the id
     numbers used should be the same as if the full set had been 
     used.

2008-04-09 20:39:12 sysad
  Decided to try doing (2.) above using iso-639-2 as its number of
  codes (~500) is more tractable that iso-639-3's ~7000.

  Modified perl/lib/jmdictxml.pm to get language data from external
  module xmllang.pm.  Then used following commands
    cd tools
    mklang.py -s csv ISO-639-2_utf-8.txt >../pg/data/kwlang.csv
    mklang.py -s perl ISO-639-2_utf-8.txt >x.pm
    <edit x.pm by hand>
    cp x.pm ../perl/xmllang.pm
    cd ../perl/lib
    make   <rebuild kwstatic.pm>
  to create kwlang.csv and the xmllang.pm module, and rebuild the 
  kwstatic.pm module. 

  Searched perl files and PETAL templates for uses of "en" when but
  found few (some uses of KWLANG_en from kwstatic.pm was all.) 
  Also fixed the new python code to correctly handle the 3-letter 
  codes.

2008-04-11 11:10:12 sysad
  Successfully parsed and loaded the 2008-04-11 full multi-language
  version of JMdict.  Perl and Python cgi scripts display the codes
  correctly(*) as does showentr.pl and shentr.py.
  (*) The perl cgi pages for editing entries had and continue to have
  no support for non-english glosses yet.
