Title:	String aggregate "summary" views
Stat:	open
Disp:	
Prio:	med
Cats:	dev
Reqtrs:	
AssdTo:	stuart

2010-04-08 12:13:00 stuart
  Revisit the postgresql views that aggregate text column values
  from diffent rows into a single "summary" text string.  I am
  not sure that the current formulations are optimal.  Motivation
  is that I got burned again by forgetting the view "esum" was
  changed to return only one kanji (oreading) rather than all of
  them.  Need a view that gives a reasonably complete look at an
  entry.

2010-04-08 12:25:00 stuart
  Below are three views that concatenate all the kanji strings
  for an entry into a single string.

  ksum1 is the way that the current ssum (and the sense part
  of esum) work.  It will return a row for every entr.id 
  although ktxt in that row will be null for entries without
  any kanji.

  Unlike ksum1, ksum2 does not reference table entr. However,
  in non-statistically significant test (one :-), it ran about
  30% slower than ksum1.  (I presume because it executes the 
  subselect for each of the kanj rows in the entr group, even
  though it returns the same results each time.)  Which led
  to ksum3 which is about 20% faster than ksum1.
  Unlike ksum1, ksum2 and ksum3 return rows only for entries
  that have kanji, and do not reference the entr table.

  CREATE OR REPLACE VIEW ksum1 AS (
    SELECT e.id,
       (SELECT ARRAY_TO_STRING(ARRAY_AGG(k2.txt), '; ') 
        FROM (
	    SELECT k.txt 
	    FROM kanj k 
	    WHERE k.entr=e.id 
	    ORDER BY k.kanj) AS k2
        ) AS ktxt
    FROM entr e);

  CREATE OR REPLACE VIEW ksum2 AS (
    SELECT DISTINCT 
       entr,
       (SELECT ARRAY_TO_STRING(ARRAY_AGG(k2.txt), '; ') 
        FROM (
	    SELECT k.txt 
	    FROM kanj k 
	    WHERE k.entr=kanj.entr 
	    ORDER BY k.kanj) AS k2
        ) AS ktxt
    FROM kanj);

  CREATE OR REPLACE VIEW ksum3 AS (
    SELECT e.entr,
       (SELECT ARRAY_TO_STRING(ARRAY_AGG(k2.txt), '; ') 
        FROM (
	    SELECT k.txt 
	    FROM kanj k 
	    WHERE k.entr=e.entr 
	    ORDER BY k.kanj) AS k2
        ) AS ktxt
    FROM 
	(SELECT DISTINCT entr FROM kanj) as e);

2010-04-08 15:15:00 stuart
  One problem with this method of generating text summaries is that is
  you want a variant at a deep level, say glosses with a language prefix,
  you need an entirely separate set of higher level views to use the
  varianrt gloss view: gsum_lang, ssum_lang, esum_lang.  When one considers
  combinations of different variants (gloss with or without lang prefix,
  sense with or without pos, sense with or without notes, ...) the 
  combatorial explosion is unmanagable.

2010-04-08 19:30
  Wrote a set of views based on ksum3 above, all prefixed with "vt_", put
  in mkviews2.sql, and incorpostaed into the jmdictdb creation process.

