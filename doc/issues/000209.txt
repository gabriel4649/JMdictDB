Title:	dup key error (freq table) when kanji removed 
Stat:	done
Disp:	closed
Prio:	high
Cats:	bug
Reqtrs:	
AssdTo:	stuart

2011-08-29 11:07:00 stuart
 Email from Nils Roland Barth<jdict.nbarth@xoxy.net> reports 
 problem trying to remove the first (夏期) kanji from entry
 1589900:
   夏期 [ ichi1] ； 夏季 [ ichi1,news1,nf13]
  【 かき [ ichi1,news1,nf13] ； なつき ( 夏季 ) 】
    1. 	[n,adj-no]
      ▶ summer season

 > Traceback (most recent call last):
 >   File "/usr/local/apache2/jmdictdb/cgi-bin/edsubmit.py",
 > line 644, in <module>
 >     main (args, opts)
 >   File "/usr/local/apache2/jmdictdb/cgi-bin/edsubmit.py",
 > line 183, in main
 >     sess.userid if sess else None)
 >   File "/usr/local/apache2/jmdictdb/cgi-bin/edsubmit.py",
 > line 367, in submission
 >     added = submit (dbh, entr, edtree, errs)
 >   File "/usr/local/apache2/jmdictdb/cgi-bin/edsubmit.py",
 > line 390, in submit
 >     res = addentr (dbh, entr)
 >   File "/usr/local/apache2/jmdictdb/cgi-bin/edsubmit.py",
 > line 469, in addentr
 >     res = jdb.addentr (dbh, entr)
 >   File "../lib/jdb.py", line 1389, in addentr
 >     for x in getattr (r, '_freq',  []): dbinsert (cur,
 > "freq",  ['entr','rdng','kanj','kw','value'], x)
 >   File "../lib/jdb.py", line 120, in dbinsert
 >     raise e
 > IntegrityError: duplicate key value violates unique
 > constraint "freq_entr_key"
 > DETAIL:  Key (entr, rdng, kanj, kw)=(1075060, 1, 1, 1)
 > already exists.

2011-08-29 12:22:00 stuart
 When I try to reproduce problem in local database (loaded
 with a rather old version of jmdict), I get a different
 error that occurs when attempting to display confirmation
 page:

 > Traceback (most recent call last):
 >   File "/home/stuart/jdb/jb/web/cgi/edconf.py", line 388, in <module>
 >     main (args, opts)
 >   File "/home/stuart/jdb/jb/web/cgi/edconf.py", line 139, in main
 >     jdb.copy_freqs (pentr, entr)
 >   File "../../python/lib/jdb.py", line 893, in copy_freqs
 >     try: k2._freq.append (f)
 > UnboundLocalError: local variable 'k2' referenced before assignment

 On Arakawa, with copy of current database in jmtest, I get
 same error Nils reported, which happens when edit is submitted
 (i.e. confirmation page was displayed ok.)

 Restore copy of current database locally
 $ cd jmdictdb
 $ make newdb
 $ pg_restore -O -U jmdictdb -d jmnew data/jmdict-20110829.dmp 

 Still get conf page error.  Push my current local dev version to
 Arakawa (everything was up to date) and on Arakawa diffed dev cgi
 and lib files to the running verions in /usr/local/apache2/jmdictdb/
 and found no significant differences.  Have no explanation for why
 the same edit with same data and same code produces different errors
 on different machines.

2011-08-30 22:07:00 stuart
 Debugged on Arakawa.  Stepping through jdb.copy_freqs() code
 shows that it:
  1) Moves Freq items from parent to new entry based
     on _rdng or _kanj list index; that is, Freq items 
     on ._kanj[0] are moved to same index kanji, regardless
     of what the kanj text is.  This is (IIRC) by design.
  2) Failure to reset variable inside loop combined with
     ignoring of index errors results, in the current case
     of a parent with two kanji and the new entry with one, 
     of Freq from both kanji on the parent being added to 
     two the single kanji on the new entry.  Since there 
     were Freq(kw=1, value=1) items on both kanji of parent, 
     they result in duplicate Freq items on the new entry 
     single kanji that the db rejects when the write attempt
     is made.

2011-09-01 23:54:00 stuart
 Looked at code (python/lib/jdb.py:copy_freqs()); it copies
 freq items from parent to new entry based on index, so that
 if the reading or kanji lists are permutated or leading items
 removed, freq items can be copied to the "wrong" reading or
 kanji.  Did a complete rewrite of this code and match the the
 parent and edited entry reading/kanji based on their text
 values rather than position.

 Also deleted the "replace" parameter since in both call sites
 in web/cgi/edconf.py, edsubmit.py, it looks like "replace"
 should be the mode used.  (Was in latter but not in former.)

2011-09-02 16:53:00 stuart
 There are two ways to handle a Freq object that is associated
 with a reading/kanji pair as described in the following note
 (subj: "handling freq items in non-editor submissions") posted
 to the editors list today:

 > A decision made before the submission system was 
 > deployed was that non-editors would not be allowed
 > to edit freq tags (ichi1, nf14, etc).  To implement
 > this, I ignore any freq tags on an edited entry 
 > and copy the original freq tags from the parent 
 > entry to the edited entry when the edit is submitted.
 > 
 > Freq tags can apply to a reading alone, a kanji 
 > alone or to a reading/kanji pair.
 > 
 > My question is what to do if the reading or kanji in
 > such a pair is removed in the new entry.  Should the 
 > freq tag that had been applied to the pair now be
 > applied to the sole remaining kanji or reading?  Or
 > should it be deleted entirely?
 > 
 > For example, if the entry:
 > 
 >    kanji [ichi1]
 >    reading [ichi1]
 > 
 > is edited and the kanji removed, should the new entry be 
 > 
 >    reading [ichi1]
 > 
 > or just
 > 
 >    reading

 jwb responded that he strongly preferred the "reading [ichi1]"
 answer.  Jean-Luc Léger also responded that he'd like to see
 "reading" with a notification that freq tags were changed in
 this when editor subsuquently edits for approval.

 My internet was down for a day before I was able to post
 question and I had guessed (wrongly) answer would be "reading"
 (ie delete the entire freq object if half of it goes away) and
 wrote code to that effect.  

 Will checkin this code for future reference, then change to jwb's
 preferred option.

2011-09-02 20:15;00 stuart
 Checked in the above code as changeset 1009:856c73279635.

2011-09-03 07:02:00 stuart
 Changes the deletion sematics to that requested by jwb.

 There is a potential problem.  Suppose a freq tag, say "ichi1"
 applied to a reading/kanji pair, say Rdng1 and Kanj1, and
 also to that reading and a seconfd kanji (Rdng1/Kanj2)
 The representation in database and at runtime would
 schematically look like:

       Kanji1 ---+ +--- Rdng1 ---+ +--- Kanji2
                 | |             | |
                 v v             v v
                Freq1           Freq2   
                ichi1           ichi1

 Because duplicate freq values are not displayed the above 
 will be shown (and edited) as
 
    Kanji1 [ichi1]; kanji2 [ichi1]
    Rdng1 [ichi1]

 If Kanji2 is deleted the result will be

       Kanji1 ---+ +--- Rdng1 ---+ 
                 | |             | 
                 v v             v 
                Freq1           Freq2   
                ichi1           ichi1

 This is not problem for the database, but all of the UIs 
 (XML, JEL, etc) will ignore the reading-only tag because it
 has the same value (ichi1) as the other tag.  The above is
 output in JEL as:

    Kanji1 [ichi1]
    Rdng1 [ichi1]

 which exactly the same output as would be produced if Freq2
 were not present.  There is no way to express the two tags
 above in XML or JEL.  Thus, if such an arrangement is 
 serialized and read back in, Freq2 will be lost.  Since such
 tags seem to have no useful purpose, I added new function, 
 jdb.del_superfluous_freqs() to delete any that result when
 copying freq objects to a new entry.  Of course, if the two
 tags have different values,

       Kanji1 ---+ +--- Rdng1 ---+ 
                 | |             | 
                 v v             v 
                Freq1           Freq2   
                ichi1           spec1

 then both are representable in XML and JEL and we don't delete the
 reading-only tag.

2011-09-03 21:45:00 stuart
 With the new jdb.copy_freq function, I am able to successfully 
 submit entry 1589900 after making the change (delete first kanji)
 that caused the failure originally reported.

