Title:	Cant create restr to kanji text "〆る"
Stat:	open
Disp:	
Prio:	med
Cats:	bug
Reqtrs:	
AssdTo:	stuart

2012-12-11 21:48:00 stuart
 Email from jwb (2012-12-11):
  > This seems to be a bug, in that 〆 is being classified as a
  > non-kanji. It appears in 9 entries, each time in the keb.
  >
  > ---------- Forwarded message ----------
  > From: Winnie Fields <winfielddomains@yahoo.com>
  > Date: 12 December 2012 04:59
  > Subject: Re: JMdict entries
  > To: "jimbreen@gmail.com" <jimbreen@gmail.com>
  > 
  > I just ran into a problem trying to edit a JMdict entry.  the entry is
  > for 締める (http://www.edrdg.org/jmdictdb/cgi-bin/entr.py?svc=jmdict&sid=&q=1436570.1).
  >  When I try to submit the change, I get the message: 
  > 
  > "restr value(s) '〆る' not in the entry's readings"
  > 
  > I've not seen "〆る" before, but it appears in the Kanji and Meaning(s)
  > fields (but not in the Reading(s) field).
  > 
  > I just checked, and I get the same error if I open up the edit window
  > and click on "Next" without making any changes.
  > 
  > Is there a workaround to be able to submit an edit for this entry?

2012-12-11 22:15:00 stuart
 Can replicate problem locally by editing entry seq# 1436570 and adding
 the tag "[restr=〆る]" to one of the senses.  Clicking Next then results
 in the error page:

    Error
    We're sorry but your page request could not be processed due to the following error(s):
    restr value(s) '〆る' not in the entry's readings restr value(s) '〆る' not in the entry's readings

 [The unfortunate doubling of the error message also needs to be fixed.]

 Added test0300290 to python/tests/test_jelparse:Restr which expectedly
 fails:
    ======================================================================
    ERROR: test0300290 (test_jelparse.Restr)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
      File "/usr/local/lib/python3.3/site-packages/ply/yacc.py", line 265, in parse
        return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)
      File "/usr/local/lib/python3.3/site-packages/ply/yacc.py", line 971, in parseopt_notrack
        p.callable(pslice)
      File "../lib/jelparse.py", line 63, in p_entr_1
        if err: perror (p, err, loc=False)
      File "../lib/jelparse.py", line 430, in perror
        raise ParseError (msg, loc_text)
    jelparse.ParseError: restr value(s) '〆る' not in the entry's readings

 Problem seems to be that 〆 (U+3006) is in the Unicode "CJK Symbols and
 Punctuation" block and thus does not affect the R/K clasification of the
 string which is then determined to be a reading by the presence of the 
 る character.  

 The error is generated in python/lib/jelparse.y in function mk_restrs()
 (around line 815 in rev 7096b9750c45/2012-12-01).  The flow seems to be:
 * jellex.py (the lexer) classifies text string as RTEXT or KTEXT.
 * This is parsed sucessively as 'jtext' (jelparse.y:365), 'dotlist',
   'jitem', 'jref', jrefs', then by the "TEXT EQL jrefs" rule of 'tagitem'.
 * At jelparse.y:312, the text is classified again and saved in a tuple in
   a position that depends on its classification.  This is the point it
   seems that will determine if the restr is STAGR or STAGK.  I think the
   reclass here is needed because we lost the original classification from
   the lexer along the way to here.  

2012-12-12 16:59:00 stuart
 Searched jmdict, jmnedict, examples and (my) mnn corpora for uses of
 CJK S&P characters in kanji and readings text.  See IS-26 for results.

 Found the second and third entries in jmnedict have readings of 〆 
 and 〆ヱ respectively.  Email to jwb asking if this is an error.

2012-12-14 07:23:00 stuart
 Re the use of 〆 in jmnedict reb (see previous note), that was an error
 that was corrected in recent jmnedict files.  Thus there should be no
 problem treating 〆 as a kanji character as far as jmdict and jmnedict go.

 Created new test in python/tests/test_jelparse.py and corresponsing data
 file python/tests/data/jelparse/restr.txt and verified that it fails with
 the current code due the the same cause as the original problem.

 Wasted a couple days time trying to reengineer the kanji/kana determination
 code but gave up for now; see IS-26.   

 Instead, made a bandaid fix to python/lib/jdb.py:jstr_classify() to classify
 〆 as a KANJI rather than a KSYM character.  ("Bandaid" because there are
 other entries with KSYM characters in jm{ne}dict that this problem could
 arise with in the future.)

 The formerly failing tests (as well as the others) now pass, and
 repoducing the reported problem now allows me to create the [restr=〆]
 item without an error.   Also did a "make loadall" with no errors. 
 A diff of the .pgi and .log files with ones produced before the code
 changes showed no differences (other than there is no longer a "not
 kanji" warning for the 〆る text.)

