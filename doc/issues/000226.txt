Title:	Add word conjugations
Stat:	open
Disp:	
Prio:	med
Cats:	feat
Reqtrs:	
AssdTo:	stuart

2013-10-24 07:45:00 stuart
 This IS documents the conjugation feature of JMdictDB. 

2013-10-24 07:50:00 stuart
 Conjugation of words can be done entirely in the database without
 requiring any application-level support.

 Tables defined in pg/conj.sql (and corresponding data to load
 into to them in pg/data/) provide the information needed to
 conjugate words based on their 'pos' tags.  The actual production
 of the conjugated form on words is done in views that are also
 defined in pg/conj.sql.

 The most important table is 'conjo'.  In it is a row for every
 combination of conjugation (past, passive, volitional, etc), 
 plain or formal, affirmative or negative, part-of-speech, and
 a variant number for when is more than one form for a conjugation.
 The column 'okuri' contains the okurigana text for the conjugated
 form.  It also contains columns for the kanji and kana needed when
 a conjugation involves a change in the word stem (くる -> こない
 or 為る-> 出来る for example).

 Table 'copos' associates each part-of-speech with a number that is
 the number of characters to remove from the dictionary form of a 
 word before the okurigana is appended to form te conjugated form.

 Data for table 'conjo' was generated by hand.

 The remaining table are lookup tables and tables for notes to
 be displayed when presenting conjugated words.

 View 'vinfl' provides all the conjugated forms of the words selected.
 View 'vinflxt' provides similar data in the form of a cross-tab table
 with four columns for the aff-plain, neg-plain, aff-formal and neg-
 formal conjugated forms.  

 Both views are effcient and it is practical to select a word by
 seq number, dictionary form kanji or reading, etc.

2014-06-10 21:33:00 stuart
 Received email from jwb yesterday who received mail from 
 <cfwong1@sbcglobal.net> pointing out that the conjugations of 
 良い・いい are wrong.  For example

  jmdict=# select ptxt,ktxt,rtxt,rnum,kitxt,ritxt from vinfl where seq=1605820
   and conj=2 and not fml and not neg and knum=1 and rnum in (1,2);

   ptxt  | ktxt | rtxt | rnum |  kitxt   |  ritxt   
  -------+------+------+------+----------+----------
   adj-i | 良い  | よい   |    1   | 良かった   | よかった
   adj-i | 良い  | いい   |    2   | 良かった   | いかった

 The ritxt for rnum=2 should be よかった, not いかった.
 Note also there are ~70 other entries that end with 良い・いい and should
 be conjugated the same way. 
 In my speadsheet (conj.ods) used to develop the conjugations that were
 later extracted for loading into the database conjo (and other) tables,
 I used a psuedo-pos of 'adj-ii' to distinguish 良い・いい from other 'adj-i'
 words with the intent of proposing a dedicated pos tag to jwb, but I never
 did do that.  Since he offered a dedicated pos in the above referenced
 email, I replied requesting that. 
 Also mentioned two other cases: だ (copula) which is currently tagged 'aux'
 making it non-conjugatable, and くれる which is tagged 'v1' but has an
 irregular imperative form (and used to be tagged 'v1k-i' presumably for
 that reason).

2014-06-12 12:13:00 stuart
 Supress the "Conjugations" link in the entr.py page if an entry has
 no conjugatable parts-of-speech.  Prior, the link was displayed if
 the entry has any pos tags, even if they were not conjugatable.  
 Display of the link is determined by jmcgi.add_pos_flag() which 
 formerly would add a flag to the entry if there were any pos tags.
 We change it to add the flag if the entry contains any conjugatable
 tags.  To do that, jmcgi.add_pos_flag() needs a list of pos's that
 are conjugatable.  The table, copos, contains all the pos' that 
 are conjugatable but we'd need to read it and create a global 
 list accessible to add_pos_flag().  Instead, we use the KW global
 that already exists.  But the KW dicts expect to read tables of
 triples: (id, kw, descr).  So we add a view, 'vcopos', that creates
 rows that have the same structure as kwpos but only has rows for those
 pos's that are in 'copos'.  We add that view to the list of tables 
 use to initialize KW (with the name "COPOS") and use KW.COPOS in
 add_pos_flag() to get the conjugatable pos list we need.
 
2014-06-14 16:48:00 stuart
 Ran " python3 runtests.py test_jdb_kwds" and a several fail/error. 
 Rolled back changes to e8f90bb79e59 "Add patch file for jwb tag changes."
 but still getting errors in Test_actual_db:

 ERROR: test_248 (test_jdb_kwds.Test_actual_db)
 ----------------------------------------------------------------------
 Traceback (most recent call last):
  File "/usr/local/lib/python3.3/unittest/case.py", line 385, in _executeTestPart
    function()
  File "/home/stuart/devel/jdb/jb/python/tests/test_jdb_kwds.py", line 411, in <lambda>
    lambda self,d=domain,i=id,k=kw: validate_rec(self,self.o,d,i,k))
  File "/home/stuart/devel/jdb/jb/python/tests/test_jdb_kwds.py", line 441, in validate_rec
    r1 = getattr (o, domain)[idx]
 KeyError: 29

 After some exploration it turns out that the database used for checking
 is jmnew (specified in tests/dbauth.py).  Applied patches/010.py and
 011.sql to jmnew and now tests pass.

2014-06-15 11:37:00 stuart
 Commit changes for the Conjugations link (see 2014-06-12 12:13:00) now...
  python/lib/jdb.py python/lib/jmcgi.py patches/012.sql pg/conj.sql,
  python/tests/test_jdb_kwds.py.

2014-06-16 15:30:00 stuart
 Fixed a bug in conj.py that showed up when using it to test the
 *.csv file changes.
 Also enhanced arg parsing: most users will forget to switch back
 to ascii when typing a space to separate kanji and kana arguments.
 When a jp-space character is entered the shell won't (typically)
 recognise it as an argument seperator and both the kanji and kana
 will be treated as a single kanji argument producing erroneus
 results.  Changed so that we'll split arg by hand if it contains
 jp-space character.

 Commited the adj-ii changes.

2014-06-24 18:19:00 stuart
 Have not had any response from jwb yet.
 Add pos tags and conjugations for だ ('cop':15) and くれる ('v1k-i':29)
 Also changed value of 'adj-ii' pos tag from 99 to 7.

 The only effect this (and the 'adj-ii' pos above) will have is they
 will show up in the PoS section of the search page, help text, etc,
 unless entries in JMdict are actually updated to use the new PoS
 tags.  And if that is undesireable, they can manually be deleted 
 from the kwpos table.  (They are also in the XML DTDs.)

 To apply:
     # Update code...
   hg pull && hg update
     # Update existing database(s)...
   python3 tools/patchdb.py -t 13 -d jmdict -a
     # Apply the adj-ii pos to entries...
   <execute the sql below in psql to apply adj-ii to entries.

 Also came across the following discussion of a 'cop' tag from 2010.
 Ref: edict list 2010-10-17 "A 'cop' PoS tag?"
  https://groups.yahoo.com/neo/groups/edict-jmdict/conversations/topics/4315

2014-06-16 11:14:00 stuart
 In my local database, for entries that have a kanji that ends in 良い
 and have a pos tag of 'adj-i', change the pos tag to 'adj-ii' using the 
 following sql script.  Before using it, change the userid, name and email
 field text in the "INSERT INTO hist..." statement.

 [Changed 'adj-ii' to 'adj-ix' per note <2014-08-20 15:58:00 stuart> below.]

 ===================================================================================
 BEGIN; 
 -- Create and populate a temp table with the entr.id an sens.sens numbers
 -- of the entries to be updated: entries has a kanji ending with "良い" and
 -- a sense with a pos of 'adj-i' (kw=1).
 -- FIXME? this criteria includes entry 1254440 which may be wrong:
 --  潔い(P);潔よい(io);いさぎ良い(iK) [いさぎよい] /(adj-ix) (1) manly/sportsmanlike/gracious/...
 
 CREATE TEMP TABLE __adjiiupd__  AS 
   SELECT DISTINCT e.id AS entr,s.sens
     FROM entr e
       JOIN sens s ON s.entr=e.id
       JOIN pos p ON p.entr=s.entr AND p.sens=s.sens
       JOIN kanj k ON k.entr=e.id
     WHERE k.txt LIKE '%良い' AND p.kw=1;
 
 -- Change the 'adj-i' (kw=1) pos tags of the entries saved in the temp table
 -- to 'adj-ix'.
 
 UPDATE pos SET kw=7 FROM __adjiiupd__ a
   WHERE pos.entr=a.entr AND pos.sens=a.sens AND pos.kw=1;
 
 -- For each of the entries saved in the temp table, add a hist table entry.
 -- Note that these entries will have no 'diff' text.
 -- ***NOTE***: change the userid, name and email fields below!
 
 INSERT INTO hist(entr,hist,stat,unap,userid,name,email,notes)
   (SELECT 
       e.id, 1+COALESCE(MAX(h.hist), 0), e.stat, e.unap, 
       'smg','Stuart McGraw','smcg4191@frii.com',  -- Change these as apporiate...
       'Change pos from adj-i to adj-ix.'
      FROM (SELECT DISTINCT entr FROM __adjiiupd__) AS a
      JOIN entr e ON e.id=a.entr
      LEFT JOIN hist h ON e.id=h.entr
      GROUP BY 1,3,4,5,6,7,8);
 
 DROP TABLE __adjiiupd__;

 -- Add 'cop' pos to the first sense of だ.  
 -- FIXME: src=1 may not identify the right entry in some databases, nor is setting sens=1 neccesarily correct.
 -- FIXME: no history record created.
 INSERT INTO pos(entr,sens,ord,kw) (SELECT e.id,1,2,15 FROM entr e WHERE e.src=1 AND e.seq=2089020);
 -- Update 'v1' pos on くれる to 'v1k-i'.
 -- FIXME: src=1 may not identify the right entry in some databases.
 -- FIXME: no history record created.
 UPDATE pos SET kw=29 FROM entr e WHERE e.src=1 AND e.seq=1269130 AND e.id=pos.entr AND pos.kw=28;
 
 COMMIT;
 ====================================================================================

 For use while testing, the following will undo the effects of
 the entry changes above:

 BEGIN;
 UPDATE pos SET kw=1 WHERE kw=7;
 DELETE FROM pos WHERE kw=15;
 UPDATE pos SET kw=28 WHERE kw=29;
 COMMIT;

 For use while testing, the following will undo the effects of
 the patches/013.sql:

 BEGIN;
 DELETE FROM dbpatch WHERE level=13;
 DELETE FROM conjo_notes WHERE pos IN (7,15,29); 
 DELETE FROM conjo WHERE pos IN (7,15,29); 
 DELETE FROM copos WHERE pos IN (7,15,29); 
 DELETE FROM kwpos WHERE id IN (7,15,29);
 COMMIT;

2014-06-24 23:07:00 stuart
 Tests failing: 
   test_jelparse.Lookuptag: test005, test019
 test005 for example:
 ===================
  FAIL: test005 (test_jelparse.Lookuptag)
  AssertionError: Lists differ: [['POS', 17]] != [['COPOS', 17], ['POS', 17]]
  First differing element 0:
  ['POS', 17]
  ['COPOS', 17]
  Second list contains 1 additional elements.
  First extra element 1:
  ['POS', 17]
  - [['POS', 17]]
  + [['COPOS', 17], ['POS', 17]]
 ===================
 
 jelparse.Lookup now finds any conjugatable pos tag in both the KW 'POS'
 and 'COPOS' dicts (called "domains" in jelparse.y).

 I don't *think* this is a problem.  In jelparse.y:sens_tag(), we resolve
 such ambiguities by ignoring any domains that are not relevent in the
 current context.  Since COPOS will never be relevent, any dups from it
 should be ignored.  I think.

 Changed the tests to accept the duplicate tags.

2014-06-28 20:30:00 stuart
 Also apropos to 'aux' PoS is this Edict list thread from 2010-07-28
  Subject: [edict-jmdict] aux, aux-v, aux-adj

2014-08-16 16:41:00 stuart
 Noticed that the provisional conjugation (conj=4) of くる (pos=45) was wrong:
 the conjugation data results in これば but should be くれば.  Fixed in 
 pg/data/conjo.csv and patches/017.sql

2014-08-20 15:58:00 stuart
 A discussion on the Edict list: 
  2014-06-28, "Conjugations and PoS tags for だ, くれる", Stuart McGraw
   https://groups.yahoo.com/neo/groups/edict-jmdict/conversations/messages/5203
  2014-07-25 "Re: いい/よい POS matters", Jim Breen
   https://groups.yahoo.com/neo/groups/edict-jmdict/conversations/messages/5225
  2014-07-25, "Re: くれる POS issues", Jim Breen
   https://groups.yahoo.com/neo/groups/edict-jmdict/conversations/messages/5226
  2014-08-06, "Additional POSs", Jim Breen
   https://groups.yahoo.com/neo/groups/edict-jmdict/conversations/messages/5257
 resulted in the acceptance of the proposal to add PoS tags for yoi/ii adjectives,
 くれる and だ as 'adj-ix', 'v1-s' and 'cop-da'.  I've already added to these to
 the repo as 'adj-i', 'v1k-i' and 'cop', so those keywords need to be changed
 to the approved ones.

 Fixed in pg/data/kwpos.csv, patches/018.sql, python/tests/test_jdb_kwds.py,
  python/lib/dtd-jmdict.xml, python/lib/dtd-jmdict-ex.xml

2014-08-21 22:17:00 stuart
 Replaced the conjugations for 'adj-na' (pos=2), 'n' (pos=17) and 'vs' (pos=46)
 with a single present/affirm/plain conjugation with footnote referring to the 
 entry for the base verb (だ, だ and する respectively) for conjugations.
 This is db patchlevel 19.


