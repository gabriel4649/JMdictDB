########################################################################
#
#   This file defines global configuration settings that control 
#   the operation of an individual instance of a JMdictDB system.
# 
#   *** WARNING ***
#   This file contains database passwords and should be protected 
#   appropriately.
#
########################################################################

[web]

  # The directory in which the jmdictdb CGI scripts will look
  # for either of the control files "status_maint" or "status_load".
  # If either is present (contents are ignored) then the script
  # will return a redirect to one of the static HTML pages, 
  # "../status_maint.html" or "../status_load.html" according to
  # the control file name.  The html filenames and location are not
  # currently configurable.  Note that "../" is the parent directory
  # of the CGI directory.
STATUS_DIR = .

  # Email address that will appear at the bottom of each
  # cgi web page as the contact for questions etc.
CONTACT_EMAIL = jimbreen@edrdg.org

  # Database to use if no svc parameter given.
DEFAULT_SVC = db_jmdict

# The following control the number of entries that the search
# page will show on the search results page (web/cgi/srchres.py). 

  # Default entries per page, if not overridden in url.
DEF_ENTRIES_PER_PAGE = 100	

  # Absolute maximum/minimum number of entries per page
  # regardless of any value provided in url.
MAX_ENTRIES_PER_PAGE = 1000
MIN_ENTRIES_PER_PAGE = 1

  # The filesystem directory and url to same for a directory
  # that cgi/jbedits.py and  cgi/jbedit.py will look in for
  # editdata files created by tools/jbsubs.py.
EDITDATA_DIR = /home/me/public_html/editdata
EDITDATA_URL = http://localhost/~me/editdata

  # URL for Gahoh kanji stroke order animations.  If not 
  # available leave empty after the "=".  If supplied, must
  # end with a trailing slash.
GAHOH_URL =
#GAHOH_URL = http://localhost/gahoh/

#=======================================================================
[logging]

  # Name (optionally including path) to a logfile that will be used
  # by the CGI scripts in web/cgi/ when they are invoked without any
  # command line arguments (typically the case when they are invoked
  # by a web server.)  When run with command line arguments (typically
  # the case when run interactively for debugging purposes) or set
  # to an empty value (nothing following the "=" character) logging
  # output will be directed to stderr.  If not present the default
  # value is "jmdictdb.log".
#LOG_FILENAME = jmdictdb.log

  # The default logging level.  Each logging message generated by
  # the code has an associated log level: CRITICAL (highest), ERROR,
  # WARNING, INFO, DEBUG (lowest).  (In this file log levels can be
  # given in either case.)  A message will be output to the logfile
  # if its log level is equal or greater that LOG_LEVEL.  If not it
  # will be discarded (but see "Filters" belows for making fine-tuned
  # exceptions to this.)  If not present, the default value is "warning".
#LOG_LEVEL = warning

  # Filters:
  # A list of log levels and regex patterns that request logging
  # message output for certain messages whose log level is lower
  # than LOG_LEVEL.
  # - Each filter is on a separate line with no intervening blank
  #   or comment lines and must be indented relative to the
  #   "LOG_FILTERS=" line.
  # - A filter consists of an initial (case-insensitive) letter
  #   from the set ('w', 'i', 'd'} (corresponding to the logging
  #   levels, WARNING, INFO, DEBUG) optionally preceeded by a "!"
  #   character.  The remainder of the string is a regular expression.
  # - Logging messages with a level greater or equal to LOG_LEVEL
  #   will be output as expected regardless of filters.
  # - Messages with a level less than the logger's level will be
  #   compared with each filter in the order given looking for a
  #   match: the message's log level is greater or equal to the
  #   filter's log level and message's source (logger name) matches
  #   the filter's regex.
  # - If the matched filter was not preceeded with a "!" the log
  #   message will be printed and no further filters will be compared.
  # - If the matched filter was preceeded with a "!" the log message
  #   will not be printed and no further filters will be compared.
  # - If the log message matched no filters it will not be output.
  #
  # Example:
  # Assume LOG_LEVEL is set to "warning", and LOG_FILTERS is set so:
  #   LOG_FILTERS
  #     !D^xx
  #     Dyes$
  #
  # If the following log messages are generated they will be handled
  # as noted in the comments:
  #
  #   L('test_yes').debug('wow')       # Printed (matched filt#2)
  #   L('test_no').debug('no see me')  # Not printed (no match)
  #   L('test_no').error('see me!')    # Printed (no match but msg
  #                                    #  level >= logger level.
  #   L('xx_yes').info('but not me')   # Not printed (neg. match)
  #
  # Note that if the order of the two filters were reversed, the
  # forth message would be output because the 'Dyes$' filter would
  # match before the '!D^xx' filter could reject it.
  #
#LOG_FILTERS =
#  D^cgi.edsubmit

#=======================================================================
[search]

ENABLE_SQL_SEARCH = editors
  # If ENABLE_SQL_SEARCH is "no" or undefined, do not allow the
  # search results page (web/cgi/srchres.py) to process "sql"
  # url parameters.
  # If not None or False, it may have either of the values,
  # "all" or "editors" to allow it to accept a 'sql' parameter
  # from any user, or only from logged in editors respectively.
  # This requires that the database have special users added
  # for use by JMdictDB app, the config.ini file be configured
  # to use them, and that that security be set on all jmdictdb
  # database objects correctly.  If these are not done correctly,
  # a user enabled by ENABLE_SQL_SEARCH could delete or
  # inappropriately change database data.
  # If None or False, arbitrary sql won't be accepted by the
  # srchres page and a simpler database security configuration
  # can be used, but users of the srchsql page will get
  # an error if they try to use it.

MAX_QUERY_COST = 2000000
  # Do not run any search query in web/cgi/srchres.py that has a
  # cost (as reported by Postgresql's EXPLAIN command) greater
  # than this number.

#======================================================================

  # The following sections define the databases that can be
  # opened by name by jdb.dbOpenSvc().  Each section name must
  # be prefixed with "db_".  Each section  must have at least
  # the option:
  #     dbname -- Name of database to open.
  # Optional options are:
  #     host -- Name or ip address of machine that database resides
  #         on.  If not given, no "host" parameter will be passed to 
  #         postgres resulting in use of the local database server.
  #     user -- Username to use when connecting to database.  If not
  #         given, the normal postgres username resolution procedure
  #         will be used (.pgpass file, etc.)
  #     pw -- Password for 'user'
  #     sel_user -- Username for a user that has only "select"
  #         priviledges in the database.  If not given, no login
  #         will be done for the select-only user. 
  #     sel_pw -- Password for 'sel_user'.
  #     session_db -- Name of the section in this file that contains
  #         login information for the session database.

[db_session]
;host = localhost
dbname = jmsess
user = jmdictdb
;pw = xxxxxx

[db_jmdict]
;host = localhost
dbname = jmdict
sel_user = jmdictdbv
;sel_pw = xxxxxx
user = jmdictdb
;pw = xxxxxx
session_db = db_session

[db_jmtest]
;host = localhost
dbname = jmtest
sel_user = jmdictdbv
;sel_pw = xxxxxx
user = jmdictdb	
pw = xxxxxx
session_db = db_session

[db_jmnew]
;host = localhost
dbname = jmnew
sel_user = jmdictdbv
;sel_pw = xxxxxx
user = jmdictdb	
pw = xxxxxx
session_db = db_session

