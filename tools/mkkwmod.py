#!/usr/bin/env python
#
# Generate a static keywords module from the kw table csv files.
#
# Copyright (c) 2007 Stuart McGraw 

_VERSION_=("$Revision$"[11:-2],"$Date$"[7:-11])
_AUTHOR_ = "Stuart McGraw <smcgraw@frii.com>"

import sys, re, datetime
import jdb

def main (args, opts):
	pgdatadir = opts.d;
	if pgdatadir[-1] != '/' and pgdatadir[-1] != '\\': pgdatadir += '/'
	KW = jdb.Kwds (pgdatadir)
	print "# This file was generated by mkkwmod.py-%s on %s" \
	       % (_VERSION_[0], datetime.datetime.today().ctime())
	print "\nimport jdb\n"
	print "KW = jdb.Kwds()"
	for t in KW.attrs():
	    for r in KW.recs (t):
		print "KW.add (\"%s\", (%d, r'%s', %s))" % (t, r[0], r[1], repr(r[2]))
	print 
	for t in KW.attrs():
	    for r in KW.recs (t):
		w = "KW" + t + "_" + r.kw
		w = w.replace("-", "_")
		print "%s = %s" % (w, r.id)


def parse_cmdline ():
	from optparse import OptionParser 
	u = \
"""\n\tpython %prog [options]
	
  %prog will write a Python module (to stdout) which when imported,
  will create the same data structures as are created by the jdb.KWDS
  class.  The module produced by this program is typically imported
  by programs that need access to jdb keyword values but don't other-
  wise need or want to access a database to get them.

arguments: (none)"""

	v = "Version %s (%s)" % _VERSION_
	p = OptionParser (usage=u, version=v)
	p.add_option ("-d", "--dir",
            action="store", dest="d", default="../pg/data/",
            help="Directory containing the kw*.csv files.  Default is")
	opts, args = p.parse_args ()
	#...arg defaults can be setup here...
	return args, opts

if __name__ == '__main__': 
	args, opts = parse_cmdline ()
	sys.argv[0] = sys.argv[0].split('\\')[-1].split('/')[-1]
	main (args, opts)

